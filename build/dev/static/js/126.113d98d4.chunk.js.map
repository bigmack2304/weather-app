{"version":3,"file":"static/js/126.113d98d4.chunk.js","mappings":"+OAcA,SAASA,EAAYC,GACjB,OAAOA,EAAIC,WAAW,KAAOD,EAAIE,MAAM,GAAKF,CAChD,CAEA,SAASG,EAAYC,GAAwB,IAArBC,EAAQD,EAARC,SACdC,GAAkBC,EAAAA,EAAAA,MACpBC,GAA0BC,EAAAA,EAAAA,KAC1BC,GAAkBC,EAAAA,EAAAA,IAAoB,SAACC,GAAK,OAAKA,EAAMC,UAAU,IACrEC,GAAgDC,EAAAA,EAAAA,IAAiB,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhEI,EAAgBF,EAAA,GACvBG,GAD4CH,EAAA,IACVI,EAAAA,EAAAA,WAAkB,IAAMC,GAAAJ,EAAAA,EAAAA,GAAAE,EAAA,GAAnDG,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC1BG,OAAuCC,EACvCC,OAAuCD,EACvCE,OAA4CF,EAChDG,GAA2DC,EAAAA,EAAAA,MAAhDC,EAAMF,EAAXG,IAAkBC,EAAMJ,EAAXK,IAAwBC,EAAWN,EAAtBO,UA6DhC,OA1DmB,WACf,GAAIL,EAAQ,CACR,IAAIM,EAAOC,OAAOtC,EAAY+B,IAC9B,GAAIQ,MAAMF,GAAO,OACjBZ,EAAmBY,CACvB,CAEA,GAAIJ,EAAQ,CACR,IAAII,EAAOC,OAAOtC,EAAYiC,IAC9B,GAAIM,MAAMF,GAAO,OACjBV,EAAmBU,CACvB,CAEIF,IACAP,EAAwB5B,EAAYmC,GAE5C,CACAK,IAGAC,EAAAA,EAAAA,YAAU,WAAO,IAADC,EAAAC,EAAAC,EACRC,EAAWjB,GAAyBjB,EAAgBkC,WAAuC,QAA/BH,EAAIvB,EAAiB2B,QAAQ,UAAE,IAAAJ,OAAA,EAA3BA,EAA6BK,MAC7Ff,EAAMP,GAAoBd,EAAgBqB,MAAkC,QAA/BW,EAAIxB,EAAiB2B,QAAQ,UAAE,IAAAH,OAAA,EAA3BA,EAA6BX,KAC9EE,EAAMP,GAAoBhB,EAAgBuB,MAAkC,QAA/BU,EAAIzB,EAAiB2B,QAAQ,UAAE,IAAAF,OAAA,EAA3BA,EAA6BV,KAUlF,YARgBR,GAAZmB,QAAgCnB,GAAPM,QAA2BN,GAAPQ,EAC7CV,GAAa,IAEbA,GAAa,GACbjB,EAAgB,YAADyC,OAAaH,EAAQ,MAAAG,OAAKhB,EAAG,MAAAgB,OAAKd,IACjDzB,GAAwBwC,EAAAA,EAAAA,IAAW,CAAEjB,IAAAA,EAAKE,IAAAA,EAAKW,SAAAA,MAG5C,WAAO,CAClB,GAAG,KAGHJ,EAAAA,EAAAA,YAAU,WACN,IAAMI,EAAuBlC,EAAvBkC,SAAUb,EAAarB,EAAbqB,IAAKE,EAAQvB,EAARuB,IAEjBW,GAAYb,GAAOE,KACnBgB,EAAAA,EAAAA,IAAkBL,IAClBM,EAAAA,EAAAA,IAAiBN,GACjBtC,EAAgB,YAADyC,OAAaH,EAAQ,MAAAG,OAAKhB,EAAG,MAAAgB,OAAKd,IAEzD,GAAG,CAACvB,EAAgBkC,SAAUlC,EAAgBqB,IAAKrB,EAAgBuB,OAInEO,EAAAA,EAAAA,YAAU,WACFhB,GAAoBE,GAAoBC,GAEpCjB,EAAgBkC,WAAajB,GAC7BnB,GAAwBwC,EAAAA,EAAAA,IAAW,CAAEjB,IAAKP,EAAkBS,IAAKP,EAAkBkB,SAAUjB,IAGzG,GAAG,CAACH,EAAkBE,EAAkBC,KAEjCwB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAA/C,SAAGiB,GAAY6B,EAAAA,EAAAA,KAACE,EAAAA,GAAQ,CAACC,GAAI,mBAAuBjD,GAC/D,C","sources":["HOC/HomeProvider/HomeProvider.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport type { IHomePageProps } from \"../../pages/Home/Home\";\nimport { useNavigate, useParams, Navigate } from \"react-router-dom\";\nimport { useAppStoreDispatch, useAppStoreSelector } from \"../../redux/redux_hooks\";\nimport { updateCity } from \"../../redux/slises/weather_lat_lon\";\nimport { useLoacalStorage } from \"../../hooks/useLocalStorage\";\nimport { update_meta_title, update_meta_desc } from \"../../utils/util_functions\";\n\ninterface IHomeProvider {\n    children: React.ReactElement<IHomePageProps>;\n}\n\ntype TProps = Readonly<IHomeProvider>;\n\nfunction removeColon(str: string): string {\n    return str.startsWith(\":\") ? str.slice(1) : str;\n}\n\nfunction HomeProvider({ children }: TProps) {\n    const router_navigate = useNavigate();\n    let stateWeatherGeoDispatch = useAppStoreDispatch();\n    let stateWeatherGeo = useAppStoreSelector((state) => state.weatherGeo);\n    const [localStorageData, setLocalStorageData] = useLoacalStorage(false);\n    const [isNonCity, setIsNonCity] = useState<boolean>(false); // будет true если город не определен (при первой загрузке компонента)\n    let urlLatNormalized: number | undefined = undefined;\n    let urlLonNormalized: number | undefined = undefined;\n    let urlCityNameNormalized: string | undefined = undefined;\n    let { lat: urlLat, lon: urlLon, city_name: urlCityName } = useParams(); // пока это сырые данные, нужно удалить двоиточия и преобразовать lat lon в числа\n    // нормализуем urlLat urlLon urlCityName\n    // думаю именно такое решение будет более эффективно по времяни\n    const normalizer = () => {\n        if (urlLat) {\n            let temp = Number(removeColon(urlLat));\n            if (isNaN(temp)) return;\n            urlLatNormalized = temp;\n        }\n\n        if (urlLon) {\n            let temp = Number(removeColon(urlLon));\n            if (isNaN(temp)) return;\n            urlLonNormalized = temp;\n        }\n\n        if (urlCityName) {\n            urlCityNameNormalized = removeColon(urlCityName);\n        }\n    };\n    normalizer();\n\n    // при вервой загрузке определим как загружать город, по ссылке, из стора или из локал стораджа\n    useEffect(() => {\n        let cityName = urlCityNameNormalized || stateWeatherGeo.cityName || localStorageData.history[0]?.name;\n        let lat = urlLatNormalized || stateWeatherGeo.lat || localStorageData.history[0]?.lat;\n        let lon = urlLonNormalized || stateWeatherGeo.lon || localStorageData.history[0]?.lon;\n\n        if (cityName == undefined || lat == undefined || lon == undefined) {\n            setIsNonCity(true);\n        } else {\n            setIsNonCity(false);\n            router_navigate(`/search/:${cityName}/:${lat}/:${lon}`);\n            stateWeatherGeoDispatch(updateCity({ lat, lon, cityName }));\n        }\n\n        return () => {};\n    }, []);\n\n    // при обновлении стора меняем url и meta\n    useEffect(() => {\n        let { cityName, lat, lon } = stateWeatherGeo;\n\n        if (cityName && lat && lon) {\n            update_meta_title(cityName);\n            update_meta_desc(cityName);\n            router_navigate(`/search/:${cityName}/:${lat}/:${lon}`);\n        }\n    }, [stateWeatherGeo.cityName, stateWeatherGeo.lat, stateWeatherGeo.lon]);\n\n    // при обновлении url меняем стор, если они отличаются\n    // это приведет к двойному рендеру но зато у нас будут работать стрелки назад вперед в браузере\n    useEffect(() => {\n        if (urlLatNormalized && urlLonNormalized && urlCityNameNormalized) {\n            // console.log(stateWeatherGeo.cityName, urlCityName);\n            if (stateWeatherGeo.cityName !== urlCityNameNormalized) {\n                stateWeatherGeoDispatch(updateCity({ lat: urlLatNormalized, lon: urlLonNormalized, cityName: urlCityNameNormalized }));\n            }\n        }\n    }, [urlLatNormalized, urlLonNormalized, urlCityNameNormalized]);\n\n    return <>{isNonCity ? <Navigate to={\"/not_city_find\"} /> : children}</>;\n}\n\nexport { HomeProvider as default };\n"],"names":["removeColon","str","startsWith","slice","HomeProvider","_ref","children","router_navigate","useNavigate","stateWeatherGeoDispatch","useAppStoreDispatch","stateWeatherGeo","useAppStoreSelector","state","weatherGeo","_useLoacalStorage","useLoacalStorage","_useLoacalStorage2","_slicedToArray","localStorageData","_useState","useState","_useState2","isNonCity","setIsNonCity","urlLatNormalized","undefined","urlLonNormalized","urlCityNameNormalized","_useParams","useParams","urlLat","lat","urlLon","lon","urlCityName","city_name","temp","Number","isNaN","normalizer","useEffect","_localStorageData$his","_localStorageData$his2","_localStorageData$his3","cityName","history","name","concat","updateCity","update_meta_title","update_meta_desc","_jsx","_Fragment","Navigate","to"],"sourceRoot":""}